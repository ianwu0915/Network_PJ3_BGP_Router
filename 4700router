#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

from route import Route


# Should constantly be reading from the sockets to make sure we receive all messages
# handle multiple sockets using select or poll
# handle json messages based on type, source, destination, and message

class Router:
    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.relations = {}
        self.sockets = {}
        self.ports = {}
        self.neighbors = []
        self.routing_table = []
        self.messageCopy = []

        # Create a socket for each connection
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.neighbors.append(neighbor)

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor,
                      json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    # Accept a message(json) and update the routing table
    def update(self, message):
        self.messageCopy.append(message)

        route = Route(message)
        self.routing_table.append(route)
        self.checkAggregation(route)

        as_path = route.ASPath.copy()
        as_path.insert(0, self.asn)

        # if from customer, send to all neighbors
        if self.relations[message["src"]] == "cust":
            # send to all neighbors
            for neighbor in self.neighbors:
                if neighbor != message["src"]:
                    self.send(neighbor,
                              json.dumps({"msg": route.copy(as_path),
                                          "src": self.our_addr(neighbor), 'dst': neighbor, 'type': 'update'}))
        else:
            for neighbor in self.neighbors:
                if neighbor != message["src"] and self.relations[neighbor] == "cust":
                    self.send(neighbor,
                              json.dumps({"msg": route.copy(as_path),
                                          "src": self.our_addr(neighbor), 'dst': neighbor, 'type': 'update'}))

    def withdraw(self, message):
        self.messageCopy.append(message)

        for each in message["msg"]:
            for r in self.routing_table:
                if (r.source == message["src"] and r.network == each["network"]
                        and r.netmask == each['netmask']):
                    self.routing_table.remove(r)

        # if from customer, send to all neighbors
        if self.relations[message["src"]] == "cust":
            for neighbor in self.neighbors:
                if neighbor != message["src"]:
                    self.send(neighbor, json.dumps({"msg": message["msg"], "src": self.our_addr(neighbor),
                                                    "dst": neighbor, "type": "withdraw"}))

        else:
            for neighbor in self.neighbors:
                if neighbor != message["src"] and self.relations[neighbor] == "cust":
                    self.send(neighbor, json.dumps({"msg": message["msg"], "src": self.our_addr(neighbor),
                                                    "dst": neighbor, "type": "withdraw"}))

        return

    def dump(self, message):
        dump = []
        for route in self.routing_table:
            route_dump = route.dump()
            route_dump['peer'] = route.source
            # Update the peer field from the message_copy with the source IP of the router that sent "update" message
            # for msg in self.messageCopy:
            #     if (((msg["type"] == "update" and route_dump['network'] == msg["msg"]["network"]) and
            #          route_dump['ASPath'] == msg["msg"]["ASPath"]) and
            #             route_dump['netmask'] == msg["msg"]["netmask"]):
            #         route_dump['peer'] = msg["src"]
            #
            #         print("Peer: ", route_dump['peer'])
            #         break

            dump.append(route_dump)

        table_msg = json.dumps(
            {"src": self.our_addr(message["src"]), "dst": message["src"], "type": "table", "msg": dump})

        self.send(message["src"], table_msg)

    def checkAggregation(self, route):
        while True:
            aggregated = False
            for r in self.routing_table:
                for other in self.routing_table:
                    if other != r and r.isAdjacent(other):
                        self.routing_table.remove(other)
                        r.netmask = r.ip.shift_ip_and_mask()

                        r_ip = r.ip.ip_to_int()
                        o_ip = other.ip.ip_to_int()

                        if r_ip > o_ip:
                            r.network = other.nework

                        aggregated = True
                        break
                if aggregated:
                    break
            if not aggregated:
                break

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                message = json.loads(msg)
                msg_type = message['type']

                # type = update
                if msg_type == "update":
                    self.update(message)

                # type = data
                elif msg_type == "data":
                    # forward the message to the destination
                    dst = message['dst']
                    print("Forwarding message to %s" % dst)
                    
                    # if the ip is not in the routing table return the msg with no route
                    if not self.check_route(dst):
                        self.send(srcif, json.dumps({"src": self.our_addr(srcif), "dst" : message["src"], "type": "no route",
                                                     "msg": {}}))
                        
                elif msg_type == "dump":
                    self.dump(message)

                elif msg_type == "withdraw":
                    self.withdraw(message)

                else:
                    print("Unknown message type: %s" % msg_type)
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
